using InventoryApi.Repositories;
using InventoryApi.Services;
using InventoryApi.Utilities;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddSwaggerGen();
// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
// Configure Swagger/OpenAPI and include XML comments for richer docs
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
    {
        Title = "Inventory API",
        Version = "v1",
        Description = "A small inventory API for demo and learning purposes. Use the endpoints to create, read, update and delete items."
    });

    // Include XML comments (generated by the project) in the Swagger docs
    try
    {
        var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
        var xmlPath = System.IO.Path.Combine(AppContext.BaseDirectory, xmlFile);
        if (System.IO.File.Exists(xmlPath)) options.IncludeXmlComments(xmlPath);
    }
    catch
    {
        // ignore - XML comments are optional
    }
    // Enable [SwaggerOperation] and related attributes
    options.EnableAnnotations();
    // Add operation filter to attach example response bodies
    options.OperationFilter<InventoryApi.Swagger.ExamplesOperationFilter>();
});

// Configure CORS: allow specific origins from environment or permit any origin in Development
const string DefaultCorsPolicy = "DefaultCorsPolicy";
builder.Services.AddCors(options =>
{
    options.AddPolicy(DefaultCorsPolicy, policy =>
    {
        var origins = Environment.GetEnvironmentVariable("CORS_ALLOWED_ORIGINS");
        if (!string.IsNullOrWhiteSpace(origins))
        {
            // Expect comma-separated origins
            var split = origins.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            policy.WithOrigins(split).AllowAnyHeader().AllowAnyMethod();
        }
        else if (builder.Environment.IsDevelopment())
        {
            // Convenience for local development only
            policy.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod();
        }
        else
        {
            // In production, require explicit origin list
            policy.WithOrigins("https://your-production-domain.example").AllowAnyHeader().AllowAnyMethod();
        }
    });
});

// Register application services
builder.Services.AddSingleton<IInventoryRepository, InMemoryInventoryRepository>();
builder.Services.AddScoped<IInventoryService, InventoryService>();
builder.Services.AddScoped<DataSeeder>();

var app = builder.Build();

// Configure middleware
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.UseCors(DefaultCorsPolicy);
app.MapControllers();
// Seed data on startup when requested (SEED_DATA=true) or in Development by default
var seedData = Environment.GetEnvironmentVariable("SEED_DATA");
if (string.Equals(seedData, "true", StringComparison.OrdinalIgnoreCase) || app.Environment.IsDevelopment())
{
    // Run seeding synchronously during startup so sample data is available immediately
    using var scope = app.Services.CreateScope();
    var seeder = scope.ServiceProvider.GetRequiredService<InventoryApi.Utilities.DataSeeder>();
    seeder.SeedAsync(default).GetAwaiter().GetResult();
}
app.Run();
